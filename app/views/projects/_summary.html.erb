<%# session.id %>
<%# if admin? %>
<% if admin? %>
<% u =  @project.updated_at %>
<%  c = Time.new(u.year, u.month, u.day, 0, 0, 0) %>
<%= c %>
<%# Time.now %>
<%# raw duration2((c + 3.days + 1.hour) - Time.now) %>
<% end %>
<%# now = Time.now %>
<%# duration2(Time.new(now.year, now.month, now.day, 0, 0, 0) + 1.day - now) %>
<%# end %>
<% if @time_to_destroy %>
<div class='alert alert-danger'>
  This project will be destroyed after 2 days of inactivity (<%= raw duration2(@time_to_destroy) %> from now). If you want to keep your projects longer please log in.
</div>
<% end %>

<%# Run.where(:project_id => @project.id).all.map{|e| (@h_steps[e.step_id]) ? @h_steps[e.step_id].rank : e.step_id}.to_json if admin? %>

<%= render :partial => 'filter_runs' %>
<%# session[:active_step] if admin? %>
 <%# raw editable?(@project).to_json %>
<%# current_user.to_json %>
<%# APP_CONFIG[:admin_emails].include?(current_user.email).to_json if current_user %>
<%#  admin?.to_json %>
<%# (p and ((!current_user and (p.sandbox == true and session[:sandbox] == p.key)) or (current_user and p.user_id == current_user.id) or (current_user and share = p.shares.select{|s| s.user_id == current_user.id}.first and share.analyze_perm == true))).to_json %>

<%# @h_articles.to_json %>
<%# @runs.size %>
<%# (Run.select("runs.*").joins("join annots on (annots.run_id = runs.id)").where(:project_id => @project.id, :annots => {:store_run_id => session[:store_run_id][@project.id]}).all | Run.select("runs.*").joins("join annots on (annots.run_id = runs.id)").where(:project_id => @project.id, :annots => {:store_run_id => session[:store_run_id][@project.id]}).all).size %>

<% if admin? %>
<%# @docker_images.to_json %>
<% end %>

<!--<% if @project.key == 'hwukxt' %>
<div class='alert alert-danger'>This project is corrupted and should be removed</div>
<% end %>
-->
<% if @project.cloned_project_id %>
<% if @cloned_project %>
<div class='alert alert-info'>This project has been cloned from <%= link_to "#{@cloned_project.name} [#{@cloned_project.key}]", project_path({:key => @cloned_project.key}) %></div>
<% else %>
<div class='alert alert-danger'>This project has been cloned from a deleted project</div>
<% end %>
<% end %>
<div class='row'>
  <div class="col-md-5">
    <!--    <div class='float-right'> -->
    <h4>Reproducibility</h4>
    <%= link_to(raw("<button class='btn btn-outline-info'>Instructions</button>"), instructions_project_path(@project.key), "target" => "_blank") %>
    <%= link_to 'List of commands', get_commands_project_path(@project.key), {:class => 'btn btn-outline-secondary'} %>
    <%= link_to(raw("<button class='btn btn-outline-secondary'>Initial Loom file</button>"), get_file_project_path(@project.key, :step => 'parsing', :filename => 'output.loom'), "target" => "_blank") if exportable?(@project) %>
    <!--    </div >-->    
    
    <h4 class='mt-2'>Programmatic access & Downloads</h4>
    <%= link_to 'List of Loom files (JSON)', get_loom_files_json_project_path(@project.key, {:download => 1}), {:class => 'btn btn-outline-secondary'} %>
    <button id='loom_files_btn' class='btn btn-outline-secondary'>Downloads (Loom/H5AD)</button>
    <h4 class='mt-2'>Pipeline
      <% if session[:activated_filter][@project.id] == true %>
      (filtered)
      <% end %>
    </h4>
    <div id="cy" class="cy"></div>
  </div>
  <!--  <div id="summary_graph"></div> -->
  <%# @log %>
  <%# @project_steps.to_json %>
  <%# @runs.to_json %>
  
  <%# @project.project_steps.to_json %>
  
  <%# Redis.new.pubsub("channels") %>
  <%# Redis.new.pubsub("NUMPAT") %>
  
  <%# ActionCable.server.connections.to_json %>
  <%# Run.where(:project_id => @project.id, :step_id => 1).first.to_json %>
  <div class="col-md-7">
    <% if @project.doi %>
      <h4>Analysis publications</h4>
      <% @project.doi.to_s.split(/\s*,\s*/).each do |doi| %>
      <%# a = Article.where(:pmid => pmid).first %>
       <% a = @h_articles[doi] %>
       <% if a %>
         <% authors =  (a.authors) ? a.authors.split(";") : [""] %>
         <%= raw authors.first + ((authors.size > 1) ? '<i> et al.</i> ' : '. ') + "<b>#{a.title}</b>" + " " + ((j = a.journal) ? "<i>#{j.name}</i>" : '') + ". " + a.year.to_s + "."  %> <%= link_to "DOI link", "https://doi.org/" + doi.to_s, {:class => 'badge badge-info'} %>
        
       <% end %>
      <% end %>
      <br/><br/>
    <% end %>

    <% if @project.replaced_by_project_key %>

    <div class='alert alert-danger'>
      This project is obsolete and replaced by
      <%= link_to @project.replaced_by_project_key, projects_path(:key => @project.replaced_by_project_key) %>
      <% if @project.replaced_by_comment %>
      <br/>
      <small>
	<b>Comment</b>:
	<%= @project.replaced_by_comment %>
      </small>
      <% end %>
    </div>

    <% end %>
    
    <% if @h_exp_entries.keys.size > 0 %>
    <h4>Experimental data</h4>

    <%# if @project.doi %>
    <%# @project.doi %>
     <%# raw display_article(@h_articles[@project.doi]) %>
    <%# end %>
    
    <% @h_exp_entries.each_key do |k| %>
     <% if @h_exp_entries[k].size > 0 %>
    <table id='data_authors'>
      <thead>
	<tr>
	  <th><%= @h_identifier_types[k].name %></th>
	  <th>Other identifiers</th>
	  <th>Publication</th>
	  <th>Submitters</th>
	</tr>
      </thead>
      <tbody>
	<% @h_exp_entries[k].each do |exp_entry| %>
  	 <tr>
	   <td><span id='link_exp_<%= exp_entry.id %>' class='badge badge-dark pointer exp_entry'><%= exp_entry.identifier %></span></td>
	   <td>
	     <% h_ids = Basic.safe_parse_json(exp_entry.identifiers_json, {}) %>
	     <%#  raw h_ids.keys.map{|k| h_ids[k].map{|id| "ID#{id} K#{k}"}}.flatten.join("<br/>") %>
	     <%= raw h_ids.keys.map{|k| h_ids[k].map{|id| identifier_link(id, @h_identifier_types[k.to_i])}}.flatten.join("<br/>") %>
	   </td>
	   <td>
	     <% if exp_entry.doi %>
	     <% exp_entry.doi.split(";").each do |doi| %>
	     <span id='article_<%= @h_articles[doi].id %>' class='badge badge-dark article_entry pointer'>
	       <%= display_reference(@h_articles[doi]) %>
	     </span>
	     <% end %>
	     <% end %>
	     <%# @h_articles[exp_entry.pmid.to_i].to_json + "," %>
	   </td>
	   <td><%= raw exp_entry.contributors.split(";").map{|e| "<span class='badge badge-info'>#{e.split(",").select{|e2| e2!=''}.join(" ")}</span>"}.join(" ") %></td></tr>
	<% end %>
      </tbody>
    </table>
    <br/>
    <% end %>
    <% end %>
    <% end %>
    <% if @project.provider_projects.size > 0 %>
    <h4>Data downloaded from</h4>
 <!--   <div class='alert alert-secondary'> -->
      <% @project.provider_projects.each do |pp| %>
        <% provider = pp.provider %>
        <p><%= provider.name %> <%= link_to pp.key, provider.url_mask.gsub(/\#\{id\}/, pp.key) %></p>
	<br/>
      <% end %>
<!--    </div> -->
    <% end %>
    <% if @project_type %>
    <h4>Project type: <small><%= @project_type.name %></small></h4>
    <% end %>
    <h4>All runs 
      <% if session[:activated_filter][@project.id] == true %>
      (not filtered)
      <% end %>
    </h4>
    <%= render :partial => 'display_card_deck', :locals => {:cards => @list_cards, :card_class => 'card_sum', :card_type => 'step'} %>
  </div>
</div>
<%= javascript_tag do %>

var waiting_run_ids = <%= raw @runs.select{|r| r.status_id == 1}.map{|r| r.id}.to_json %>
var running_run_ids = <%= raw @runs.select{|r| r.status_id == 2}.map{|r| r.id}.to_json %>
run_timer = upd_time2(waiting_run_ids, running_run_ids, time_zone_offset)

var adds = "<span class='badge badge-info ml-2'>KEY : <%= @project.key %></span>";
<% if @project.public == true %>
adds += "<span class='badge badge-info ml-2'>PUBLIC_KEY : ASAP<%= @project.public_id %></span>";
<% end %>
<% if @project.sandbox == false or admin? %>
adds += "<span class='badge badge-info ml-2' title='Cumulative number of distinct sessions accessing this page each day. If the same session accesses the same page 2 different days, 2 views are counted.'>Views : <%= @project.nber_views + @project.last_day_session_ids.split(",").size %></span>"
adds += "<span class='badge badge-info ml-2' title='Number of times the project has been cloned.'>Cloned : <%= @project.nber_cloned %></span>"
<% end %>
$(".step-adds_<%= @step.id %>").html(adds)



$("#data_authors").dataTable({"sDom": 'Wsrt'})

 $(".exp_entry").click(function(e){
  var id = this.id.split("_")[2]
  e.stopPropagation();
  e.preventDefault();
  $("#popup_window").removeClass("hidden")
  //  $("#popup_container").html("bla!")
    refresh("popup_container", "<%= exp_entries_path %>/" + id + "/summary", {loading: 'fa-2x'})
  var w = $(window).width();
  $("#popup_window").css({
        left: 200,
        width:w - 250,
        top: e.pageY + 10
    }).stop().show(100);
 })

 $(".article_entry").click(function(e){
  var id = this.id.split("_")[1]
  e.stopPropagation();
  e.preventDefault();
  $("#popup_window").removeClass("hidden")
  //  $("#popup_container").html("bla!")
    refresh("popup_container", "<%= articles_path %>/" + id + "/summary", {loading: 'fa-2x'})
  var w = $(window).width();
  $("#popup_window").css({
        left: 200,
        width:w - 250,
        top: e.pageY + 10
    }).stop().show(100);
 })


$(".summary_step_card").mouseover(function(){
 $(this).css("border-color", 'rgba(0,0,0,0.425)')
})
$(".summary_step_card").mouseout(function(){
 $(this).css("border-color", 'rgba(0,0,0,0.125)')
})
$(".summary_step_card").click(function(){
 var step_id = this.id.split("-")[1]
 console.log(h_steps[step_id])
// $("#menu_" + h_steps[step_id].group_name.toLowerCase()).click()
// $("#step_" + step_id).click()
 refresh("step_container", "<%= raw get_step_project_path(:key => @project.key, :nolayout => 1) %>&step_id=" + step_id, {loading: 'fa-2x loading-step'})
})

$("#loom_files_btn").click(function(e){
 //console.log("bla")
 $.getJSON( "<%= get_loom_files_json_project_path(@project.key) %>", function( data ) {
  //var content = ["<tr><th>Loom file</th><th>Run attributes</th><th>Loom content</th></tr>"];
  var content = ["<tr><th>Loom file</th><th>H5AD file</th><th>Run attributes</th></tr>"];
  //console.log(data)
   $.each( data, function(i, item) {
    var list_annots = []
    for (var i=0; i< item.content.length; i++){
      list_annots.push("<span class='badge badge-light'>" + item.content[i].name + "</span>")
    }
//    content.push("<tr><td>" + ["<a target='_blank' href='" + item.url + "' class='btn btn-primary' style='width:100%'>" + item.run_name + "</a>", item.run_attrs, list_annots.join(" ")].join("</td><td>") + "</td></tr>")
 content.push("<tr><td>" + ["<a target='_blank' href='" + item.url + "' class='btn btn-primary' style='width:100%'><div class='float-right'><sub>" + item.file_size + "</sub></div><div class='float-left'>"+ item.run_name + "</div></a>", "<a target='_blank' href='" + item.url_h5ad + "' class='btn btn-primary' style='width:100%'>H5AD export</a>", item.run_attrs].join("</td><td>") + "</td></tr>")
   }) 
  console.log(content)
  $("#ontop_popup_container").html("<table>" + content.join(" ") + "</table>")
  var w = $(window).width();
  $("#ontop_popup_window").css({
        left: 200,
        width:w - 250,
        top: e.pageY + 10,
	height:'auto'	     
  }).stop().show(100);
 })
})



var data = <%= raw @klay_data.to_json %> 
/*[
  {data: {id: 'all' }},
  {data: {id: 'female'}},
  {data: { id: 'edge1', source: 'all', target: 'female'}},
  {data: {id: 'male'}},
    {data: { id: 'edge2', source: 'all', target: 'male'}},

  {data: {id: 'female_2016'}},
  {data: { id: 'edgef16', source: 'female', target: 'female_2016'}},

  {data: {id: 'male_2017'}},
  {data: { id: 'edgem17', source: 'male', target: 'male_2017'}},
  {data: {id: 'male_2018'}},
  {data: { id: 'edgem18', source: 'male', target: 'male_2018'}},
];
*/
var style = [ // the stylesheet for the graph
  {
    selector: 'node',
    style: {
      label: 'data(label)',
  //    'content': 'data(rank)',
      'font-size': '1.5em',
      'background-color': 'data(color)'
    }
  },
/*  {
    selector: 'edge',
    style: {
      'width': 1,
      'curve-style': 'taxi',
      'taxi-direction': 'rightward',
      'line-color': '#ccc'
    }
  }
*/
{
selector: 'edge',
style: {
'curve-style': 'bezier',
'target-arrow-shape': 'triangle',
'line-color': '#aaa',
'target-arrow-color': '#aaa',
'opacity': 0.5
}
}
];

//document.addEventListener('DOMContentLoaded', function(){
$(document).ready(function(){

var cy = window.cy = cytoscape({
container: document.getElementById('cy'),

// demo your layout
layout: {
name: 'klay',
animate: true,
fit:true,
klay: {spacing: 60}
// some more options here...
},

style: style, /*[
{
selector: 'node',
style: {
'background-color': '#ccc'
}
},

{
selector: 'edge',
style: {
'curve-style': 'bezier',
'target-arrow-shape': 'triangle',
'line-color': '#aaa',
'target-arrow-color': '#aaa',
'opacity': 0.5
}
}
], */

elements: data //fetch('./example-graphs/planar-chain.json').then(function( res ){ return res.json(); })
});

//cy.on('tap', 'node', function(e){
cy.nodes().on('click', function(e){
  var node = e.target;
  console.log( 'tapped ' + node.id() );
// $("#popup_window").css({display:'none'})
// refresh("step_container", "<%= get_run_project_path(:key => @project.key, :nolayout => 1) %>&run_id=" + node.id(), {loading: 'fa-2x loading-step'})
  e.stopPropagation();
  e.preventDefault();
  $("#popup_window").removeClass("hidden")
  refresh("popup_container", "<%= raw get_lineage_project_path(:key => @project.key) %>?run_id=" + node.id() + "&include_query_node=1", {loading: 'fa-2x'})
  var w = $(window).width();
  $("#popup_window").css({
        left: 200,
        width:w - 250,
        top: e.pageY + 10
    }).stop().show(100);
});

//});
});
var treeData =
  {
  "name": "Root_Level",
  "value": 75,
  "type": "black",
  "level": "red",
  "male": 51,
  "female": 24,
  "children":[
{
    "name": "Operation",
    "value": 40,
    "type": "black",
    "level": "green",
    "male": 23,
    "female": 17,
    "children": [
      {
        "name": "Top Management",
        "value": 3,
        "type": "grey",
        "level": "red",
        "male": 3,
        "female": 0,
        "children": [
          {
            "name": "Operation Manager",
            "value": 1,
            "type": "steelblue",
            "level": "orange",
            "male": 1,
            "female": 0
          },
          {
            "name": "Account Strategist",
            "value": 1,
            "type": "steelblue",
            "level": "red",
            "male": 1,
            "female": 0
          },
          {
            "name": "Product Management Executive",
            "value": 1,
            "type": "steelblue",
            "level": "red",
            "male": 1,
            "female": 0
          }
        ]
      },
      {
        "name": "Junior Level",
        "value": 23,
        "type": "grey",
        "level": "green",
        "male": 10,
        "female": 13,
        "children": [
          {
            "name": "Analyst",
            "value": 10,
            "type": "steelblue",
            "level": "orange",
            "male": 7,
            "female": 3
          },
          {
            "name": "Intern",
            "value": 5,
            "type": "steelblue",
            "level": "red",
            "male": 0,
            "female": 5
          },
          {
            "name": "Research Associate",
            "value": 1,
            "type": "steelblue",
            "level": "red",
            "male": 0,
            "female": 1
          },
          {
            "name": "Search Marketing Analyst",
            "value": 1,
            "type": "steelblue",
            "level": "red",
            "male": 1,
            "female": 0
          },
          {
            "name": "Search Marketing Associate",
            "value": 6,
            "type": "steelblue",
            "level": "red",
            "male": 2,
            "female": 4
          }
        ]
      },
      {
        "name": "Middle Management",
        "value": 14,
        "type": "grey",
        "level": "green",
        "male": 10,
        "female": 4,
        "children": [
          {
            "name": "Account Manager",
            "value": 1,
            "type": "steelblue",
            "level": "orange",
            "male": 1,
            "female": 0
          },
          {
            "name": "Account Planner",
            "value": 8,
            "type": "steelblue",
            "level": "red",
            "male": 6,
            "female": 2
          },
          {
            "name": "Senior Analyst",
            "value": 5,
            "type": "steelblue",
            "level": "red",
            "male": 3,
            "female": 2
          }
        ]
      }
    ]
  },
  {
    "name": "Technology",
    "value": 32,
    "type": "black",
    "level": "red",
    "male": 26,
    "female": 6,
    "children":[
      {
        "name": "Top Management",
        "value": 6,
        "type": "grey",
        "level": "red",
        "male": 6,
        "female": 0,
        "children": [
          {
            "name": "Engineering Manager",
            "value": 1,
            "type": "grey",
            "level": "red",
            "male": 1,
            "female": 0
          },
          {
            "name": "Product Manager",
            "value": 1,
            "type": "grey",
            "level": "red",
            "male": 1,
            "female": 0
          },
          {
            "name": "Associate Product Lead",
            "value": 1,
            "type": "grey",
            "level": "red",
            "male": 2,
            "female": 0
          },
          {
            "name": "Associate Architect",
            "value": 1,
            "type": "grey",
            "level": "red",
            "male": 1,
            "female": 0
          },
          {
            "name": "Principal Consultant",
            "value": 1,
            "type": "grey",
            "level": "red",
            "male": 1,
            "female": 0
          }
        ]
      },
      {
        "name": "Junior Level",
        "value": 21,
        "type": "grey",
        "level": "red",
        "male": 16,
        "female": 5,
        "children":[
          {
            "name": "System Administrator",
            "value": 1,
            "type": "grey",
            "level": "red",
            "male": 1,
            "female": 0
          },
          {
            "name": "Support Engineer",
            "value": 1,
            "type": "grey",
            "level": "red",
            "male": 1,
            "female": 0
          },
          {
            "name": "Software Enginner",
            "value": 6,
            "type": "grey",
            "level": "red",
            "male": 6,
            "female": 0
          },
          {
            "name": "Associate Software Enginner",
            "value": 13,
            "type": "grey",
            "level": "red",
            "male": 8,
            "female": 5
          },
        ]
      },
      {
        "name": "Middle Management",
        "value": 6,
        "type": "grey",
        "level": "red",
        "male": 4,
        "female": 1,
        "children":[
          {
            "name": "Database Administrator",
            "value": 1,
            "type": "grey",
            "level": "red",
            "male": 0,
            "female": 1
          },
          {
            "name": "Quality Assurance Lead",
            "value": 1,
            "type": "grey",
            "level": "red",
            "male": 1,
            "female": 0
          },
          {
            "name": "Senior Software Engineer",
            "value": 2,
            "type": "grey",
            "level": "red",
            "male": 2,
            "female": 0
          },
          {
            "name": "UX Designer",
            "value": 1,
            "type": "grey",
            "level": "red",
            "male": 1,
            "female": 0
          },
        ]
      }
    ]
  },
  {
    "name": "HR & Admin",
    "value": 3,
    "type": "black",
    "level": "red",
    "male": 2,
    "female": 1,
    "children":[
      {
        "name": "Top Management",
        "value": 2,
        "type": "black",
        "level": "red",
        "male": 2,
        "female": 0,
        "children":[
          {
            "name": "Director",
            "value": 1,
            "type": "black",
            "level": "red",
            "male": 1,
            "female": 0
          },
          {
            "name": "HR Manager",
            "value": 1,
            "type": "black",
            "level": "red",
            "male": 1,
            "female": 0
          }
        ]
      },
      {
        "name": "Middle Management",
        "value": 1,
        "type": "black",
        "level": "red",
        "male": 0,
        "female": 1,
        "children":[
          {
            "name": "Front Office Executive",
            "value": 1,
            "type": "black",
            "level": "red",
            "male": 0,
            "female": 1
          }
        ]
      }
    ]
  }
]
};

/*
// Set the dimensions and margins of the diagram
var margin = {top: 20, right: 90, bottom: 30, left: 90},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var colorScale = d3.scaleLinear()
    .domain([0, 1])
.range(['red', 'green']);
var widthScale = d3.scaleLinear()
.domain([1,80])
.range([1, 10]);

// append the svg object to the body of the page
// appends a 'group' element to 'svg'
// moves the 'group' element to the top left margin
var svg = d3.select("#summary_graph").append("svg")
    .attr("width", width + margin.right + margin.left)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate("
          + margin.left + "," + margin.top + ")");

var i = 0,
    duration = 750,
    root;

// declares a tree layout and assigns the size
var treemap = d3.tree().size([height, width]);

// Assigns parent, children, height, depth
root = d3.hierarchy(treeData, function(d) { return d.children; });
root.x0 = height / 2;
root.y0 = 0;

// Collapse after the second level
root.children.forEach(collapse);

update(root);

// Collapse the node and all it's children
function collapse(d) {
  if(d.children) {
    d._children = d.children
    d._children.forEach(collapse)
    d.children = null
  }
}

function update(source) {

  // Assigns the x and y position for the nodes
  var treeData = treemap(root);

  // Compute the new tree layout.
  var nodes = treeData.descendants(),
      links = treeData.descendants().slice(1);

  // Normalize for fixed-depth.
  nodes.forEach(function(d){ d.y = d.depth * 180});

  // ****************** Nodes section ***************************

  // Update the nodes...
  var node = svg.selectAll('g.node')
      .data(nodes, function(d) {return d.id || (d.id = ++i); });

  // Enter any new modes at the parent's previous position.
  var nodeEnter = node.enter().append('g')
      .attr('class', 'node')
      .attr("transform", function(d) {
        return "translate(" + source.y0 + "," + source.x0 + ")";
    })
    .on('click', click);

  // Add Circle for the nodes
  nodeEnter.append('circle')
      .attr('class', 'node')
      .attr('r', 1e-6)
      .style("fill", function(d) {
          return d._children ? "lightsteelblue" : "#fff";
      })
.style("stroke", function(d){return colorScale(d.data.female/(d.data.female + d.data.male))});

  // Add labels for the nodes
  nodeEnter.append('text')
      .attr("dy", ".35em")
      .attr("x", function(d) {
          return d.children || d._children ? -13 : 13;
      })
      .attr("text-anchor", function(d) {
          return d.children || d._children ? "end" : "start";
      })
      .text(function(d) { return d.data.name; })
.style("fill", function(d){return colorScale(d.data.female/(d.data.value))});

  // UPDATE
  var nodeUpdate = nodeEnter.merge(node);

  // Transition to the proper position for the node
  nodeUpdate.transition()
    .duration(duration)
    .attr("transform", function(d) { 
        return "translate(" + d.y + "," + d.x + ")";
     });

  // Update the node attributes and style
  nodeUpdate.select('circle.node')
    .attr('r', 10)
    .style("fill", function(d) {
        return d._children ? "lightsteelblue" : "#fff";
    })
    .attr('cursor', 'pointer');


  // Remove any exiting nodes
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) {
          return "translate(" + source.y + "," + source.x + ")";
      })
      .remove();

  // On exit reduce the node circles size to 0
  nodeExit.select('circle')
    .attr('r', 1e-6);

  // On exit reduce the opacity of text labels
  nodeExit.select('text')
    .style('fill-opacity', 1e-6);

  // ****************** links section ***************************

  // Update the links...
  var link = svg.selectAll('path.link')
      .data(links, function(d) { return d.id; })
.style('stroke-width', function(d){
        return widthScale(d.data.value)
      });

  // Enter any new links at the parent's previous position.
  var linkEnter = link.enter().insert('path', "g")
      .attr("class", "link")
      .attr('d', function(d){
        var o = {x: source.x0, y: source.y0}
        return diagonal(o, o)
      })
.style('stroke-width', function(d){
        return widthScale(d.data.value)
      });

  // UPDATE
  var linkUpdate = linkEnter.merge(link);

  // Transition back to the parent element position
  linkUpdate.transition()
      .duration(duration)
      .attr('d', function(d){ return diagonal(d, d.parent) });

  // Remove any exiting links
  var linkExit = link.exit().transition()
      .duration(duration)
      .attr('d', function(d) {
        var o = {x: source.x, y: source.y}
        return diagonal(o, o)
      })
.style('stroke-width', function(d){
        return widthScale(d.data.value)
      })
      .remove();

  // Store the old positions for transition.
  nodes.forEach(function(d){
    d.x0 = d.x;
    d.y0 = d.y;
  });

  // Creates a curved (diagonal) path from parent to the child nodes
  function diagonal(s, d) {

    path = `M ${s.y} ${s.x}
            C ${(s.y + d.y) / 2} ${s.x},
              ${(s.y + d.y) / 2} ${d.x},
              ${d.y} ${d.x}`

    return path
  }

  // Toggle children on click.
  function click(d) {
    if (d.children) {
        d._children = d.children;
        d.children = null;
      } else {
        d.children = d._children;
        d._children = null;
      }
    update(d);
  }
}
*/
<% end %>
